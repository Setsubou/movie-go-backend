// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: movie.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteMovieById = `-- name: DeleteMovieById :exec
DELETE
FROM movies m
WHERE m.id = $1
`

func (q *Queries) DeleteMovieById(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteMovieById, id)
	return err
}

const getAllMovies = `-- name: GetAllMovies :many
SELECT m.id, m.title, m.score, m.picture, m.release_date, m.synopsis, m.publisher_id, m.created_at, m.updated_at, p.id, p.publisher_name, p.year_founded, p.country_id, p.created_at, p.updated_at
FROM movies m
LEFT JOIN publisher p ON m.publisher_id = p.id
`

type GetAllMoviesRow struct {
	Movie     Movie
	Publisher Publisher
}

func (q *Queries) GetAllMovies(ctx context.Context) ([]GetAllMoviesRow, error) {
	rows, err := q.db.Query(ctx, getAllMovies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllMoviesRow
	for rows.Next() {
		var i GetAllMoviesRow
		if err := rows.Scan(
			&i.Movie.ID,
			&i.Movie.Title,
			&i.Movie.Score,
			&i.Movie.Picture,
			&i.Movie.ReleaseDate,
			&i.Movie.Synopsis,
			&i.Movie.PublisherID,
			&i.Movie.CreatedAt,
			&i.Movie.UpdatedAt,
			&i.Publisher.ID,
			&i.Publisher.PublisherName,
			&i.Publisher.YearFounded,
			&i.Publisher.CountryID,
			&i.Publisher.CreatedAt,
			&i.Publisher.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGenresByMovieId = `-- name: GetGenresByMovieId :many
SELECT g.id, g.genre, g.created_at, g.updated_at
FROM movies m
LEFT JOIN movie_genres mg ON m.id = mg.movie_id
LEFT JOIN genres g ON mg.genre_id = g.id
WHERE m.id = $1
`

type GetGenresByMovieIdRow struct {
	Genre Genre
}

func (q *Queries) GetGenresByMovieId(ctx context.Context, id pgtype.UUID) ([]GetGenresByMovieIdRow, error) {
	rows, err := q.db.Query(ctx, getGenresByMovieId, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetGenresByMovieIdRow
	for rows.Next() {
		var i GetGenresByMovieIdRow
		if err := rows.Scan(
			&i.Genre.ID,
			&i.Genre.Genre,
			&i.Genre.CreatedAt,
			&i.Genre.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMovieById = `-- name: GetMovieById :one
SELECT m.id, m.title, m.score, m.picture, m.release_date, m.synopsis, m.publisher_id, m.created_at, m.updated_at, p.id, p.publisher_name, p.year_founded, p.country_id, p.created_at, p.updated_at, c.id, c.country_name
FROM movies m
LEFT JOIN publisher p ON m.publisher_id = p.id
LEFT JOIN country c ON p.country_id = c.id
WHERE m.id = $1
`

type GetMovieByIdRow struct {
	Movie     Movie
	Publisher Publisher
	Country   Country
}

func (q *Queries) GetMovieById(ctx context.Context, id pgtype.UUID) (GetMovieByIdRow, error) {
	row := q.db.QueryRow(ctx, getMovieById, id)
	var i GetMovieByIdRow
	err := row.Scan(
		&i.Movie.ID,
		&i.Movie.Title,
		&i.Movie.Score,
		&i.Movie.Picture,
		&i.Movie.ReleaseDate,
		&i.Movie.Synopsis,
		&i.Movie.PublisherID,
		&i.Movie.CreatedAt,
		&i.Movie.UpdatedAt,
		&i.Publisher.ID,
		&i.Publisher.PublisherName,
		&i.Publisher.YearFounded,
		&i.Publisher.CountryID,
		&i.Publisher.CreatedAt,
		&i.Publisher.UpdatedAt,
		&i.Country.ID,
		&i.Country.CountryName,
	)
	return i, err
}

const getMoviesByPublisherId = `-- name: GetMoviesByPublisherId :many
SELECT m.id, m.title, m.score, m.picture, m.release_date, m.synopsis, m.publisher_id, m.created_at, m.updated_at, p.id, p.publisher_name, p.year_founded, p.country_id, p.created_at, p.updated_at
FROM movies m
LEFT JOIN publisher p ON m.publisher_id = p.id
WHERE p.id = $1
`

type GetMoviesByPublisherIdRow struct {
	Movie     Movie
	Publisher Publisher
}

func (q *Queries) GetMoviesByPublisherId(ctx context.Context, id pgtype.UUID) ([]GetMoviesByPublisherIdRow, error) {
	rows, err := q.db.Query(ctx, getMoviesByPublisherId, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMoviesByPublisherIdRow
	for rows.Next() {
		var i GetMoviesByPublisherIdRow
		if err := rows.Scan(
			&i.Movie.ID,
			&i.Movie.Title,
			&i.Movie.Score,
			&i.Movie.Picture,
			&i.Movie.ReleaseDate,
			&i.Movie.Synopsis,
			&i.Movie.PublisherID,
			&i.Movie.CreatedAt,
			&i.Movie.UpdatedAt,
			&i.Publisher.ID,
			&i.Publisher.PublisherName,
			&i.Publisher.YearFounded,
			&i.Publisher.CountryID,
			&i.Publisher.CreatedAt,
			&i.Publisher.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertNewMovie = `-- name: InsertNewMovie :exec
INSERT INTO movies (id, title, score, picture, release_date, synopsis, publisher_id)
VALUES($1, $2, $3, $4, $5, $6, $7)
`

type InsertNewMovieParams struct {
	ID          pgtype.UUID
	Title       string
	Score       pgtype.Numeric
	Picture     string
	ReleaseDate pgtype.Date
	Synopsis    string
	PublisherID pgtype.UUID
}

func (q *Queries) InsertNewMovie(ctx context.Context, arg InsertNewMovieParams) error {
	_, err := q.db.Exec(ctx, insertNewMovie,
		arg.ID,
		arg.Title,
		arg.Score,
		arg.Picture,
		arg.ReleaseDate,
		arg.Synopsis,
		arg.PublisherID,
	)
	return err
}

const insertNewMovieGenre = `-- name: InsertNewMovieGenre :exec
INSERT INTO movie_genres (movie_id, genre_id)
VALUES ($1, $2)
`

type InsertNewMovieGenreParams struct {
	MovieID pgtype.UUID
	GenreID pgtype.UUID
}

func (q *Queries) InsertNewMovieGenre(ctx context.Context, arg InsertNewMovieGenreParams) error {
	_, err := q.db.Exec(ctx, insertNewMovieGenre, arg.MovieID, arg.GenreID)
	return err
}
